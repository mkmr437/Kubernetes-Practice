Persistent Volumes in Kubernetes

The Nautilus DevOps team is working on a Kubernetes template to deploy a web application on the cluster. There are some requirements to create/use persistent volumes to store the application code, 
and the template needs to be designed accordingly. Please find more details below

1. Create a PersistentVolume named as pv-nautilus. Configure the spec as storage class should be manual, set capacity to 4Gi, set access mode to ReadWriteOnce, volume type should be hostPath and set path to /mnt/sysops (this directory is already created, 
you might not be able to access it directly, so you need not to worry about it).


2. Create a PersistentVolumeClaim named as pvc-nautilus. Configure the spec as storage class should be manual, request 2Gi of the storage, set access mode to ReadWriteOnce.

3. Create a pod named as pod-nautilus, mount the persistent volume you created with claim name pvc-nautilus at document root of the web server, the container within the pod should be named as container-nautilus using image nginx with latest tag only (remember to mention the tag i.e nginx:latest).

4. Create a node port type service named web-nautilus using node port 30008 to expose the web server running within the pod.

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nautilus
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/security"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-nautilus
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: pod-nautilus
  name: pod-nautilus
spec:
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: pvc-nautilus
  containers:
  - image: httpd:latest
    name: container-nautilus
    volumeMounts:
        - mountPath: "/usr/local/apache2/htdocs"
          name: task-pv-storage

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: pod-nautilus
  name: web-nautilus
spec:
  ports:
  - name: 80-80
    nodePort: 30008
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    run: pod-nautilus
  type: NodePort




